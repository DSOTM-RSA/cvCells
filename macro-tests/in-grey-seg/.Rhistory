fontsize=13, cexCol=.6)
aheatmap(m, color = "-RdBu:50", scale = "col", breaks = 0, treeheight=c(100, 50),
fontsize=13, cexCol=.6)
library(dplyr)
library(plyr)
library(plyr)
a1 <- data.frame(a = 1:5, b=letters[1:5])
a2 <- data.frame(a = 1:3, b=letters[1:3])
View(a1)
View(a2)
View(a1)
with(join.keys(a1,a2),which(x %in% y))
join.keys(a1,a2)
??join.keys
library(ggplot2)
library(RColorBrewer)
drug_name <- c("a", "a", "b", "b", "b", "c", "d", "e", "e", "e", "e", "e", "e",
"f", "f", "g", "g", "g", "g", "h", "i", "j", "j", "j", "k", "k",
"k", "k", "k", "k", "l", "l", "m", "m", "m", "n", "o")
df <- data.frame(drug_name)
#get the frequency of each drug name
df_count <- count(df, 'drug_name')
#add a column that specifies the drug class
df_count$drug_class <- vector(mode='character', length=nrow(df_count))
df_count$drug_class[df_count$drug_name %in% c("a", "c", "e", "f")] <- 'class1'
df_count$drug_class[df_count$drug_name %in% c("b", "o")] <- 'class2'
df_count$drug_class[df_count$drug_name %in% c("d", "h", "i")] <- 'class3'
df_count$drug_class[df_count$drug_name %in% c("g", "j", "k", "l", "m", "n")] <- 'class4'
#expand color palette (from http://novyden.blogspot.com/2013/09/how-to-expand-color-palette-with-ggplot.html)
colorCount = length(unique(df_count$drug_name))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
test_plot <- ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) + geom_bar(stat="identity") + scale_fill_manual(values=getPalette(colorCount))
test_plot
View(df_count)
library(dplyr)
df_count = df_count %>% group_by(drug_class) %>%
mutate(cum.freq = cumsum(freq) - 0.5*freq)
ncol = table(df_count$drug_class)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("BrBG","OrRd","YlGn","Set2"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("OrRd","OrRd","OrRd","OrRd"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("BrBG","BrBG","BrBG","BrBG"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("BrBG","OrRd","YlGn","Set2"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
pal
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
lum = seq(100, 50, length.out=4)    # Vary the luminance for each bar
shift = seq(20, 60, length.out=4)  # Shift the hues for each bar
pal2 = mapply(function(n, l, s) hcl(seq(0 + s, 360 + s, length.out=n+1)[1:n], 100, l),
ncol, lum, shift)
pal2 = unname(unlist(pal2))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2) +
guides(fill=FALSE)
pal2
order(df_count,drug_class)
pal2-c
sort(df_count,drug_name)
sort(df_count)
sort(df_count$drug_class)
order(df_count,drug_class)
order(df_count,df$count$drug_class)
order(df_count$drug_class)
df_count[order(df_count$drug_class)]
df_count[order(df_count$drug_class),]
outerr<-df_count[order(df_count$drug_class),]
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2) +
guides(fill=FALSE)
outerr
View(outerr)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(pal2) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2[order(df_count$drug_class)]) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2[order(df_count$drug_class)]) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(df_count$drug_class)]) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(df_count$drug_class)]) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(outerr$drug_class)]) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(outerr$drug_class)]) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
?scale_fill_manual
pal3<-pal[order(df_count$drug_class),]
pal3<-pal2[order(df_count$drug_class),]
df_count$other<-df_count$drug_name[order(df_count$drug_class),]
df_count$other<-df_count$[order(df_count$drug_class),]
other<-df_count$[order(df_count$drug_class),]
outerr<-df_count[order(df_count$drug_class),]
View(outerr)
outer<-pal2[order(df_count$drug_class),]
df_count$other<-pal2
outerr$other<-pal2
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
pal3 = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal3 = unname(unlist(pal3))
pal3
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
pal3
pal2
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
pal.trial = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.trial[[2]] = pal.trial[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal.trial = unname(unlist(pal.trial))
pal.trial
df_count$colours<-pal.trial
View(df_count)
sorted<-pal.trial[order(df_count$drug_class),]
outerr$new<-pal.trial
ggplot(data = df_class, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = df_class, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$other)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal.trial) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=colours) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=cum.freq) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
outerr$othername <- outerr$drug_name
outerr$othername <- df_count$drug_name
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
outerr.again<-df_count[order(df_count$drug_class),]
View(outerr.again)
pal.test = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.test[[2]] = pal.test[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal.test = unname(unlist(pal.test))
df_count_sorted <- df_count[order(df_count$drug_class),]
df_count_sorted$labOrder <- df_count$drug_name
df_count$colours<-pal.test
View(df_count_sorted)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
df_count_sorted$new<-pal.trial
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=df_count_sorted$labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
pal.test = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.test[[2]] = pal.test[[2]][1:2]
pal.test = unname(unlist(pal.test))
pal.test
df_sorted <- df_count[order(df_count$drug_class),]
View(df_sorted)
df_sorted$labOrder <- df_count$drug_name
df_sorted$colours<-pal.test
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$colours) +
guides(fill=FALSE)
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_sorted$colours) +
guides(fill=FALSE)
repeating.pal = mapply(function(x,y) brewer.pal(x,y), ncol,        c("Set2","Set2","Set2","Set2"))
Alter the plot routine, with `fill` = labOrder.
repeating.pal[[2]] = repeating.pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
repeating.pal = unname(unlist(repeating.pal))
df_count_sorted <- df_count[order(df_count$drug_class),]
df_count_sorted$labOrder <- df_count$drug_name
df_count$colours<-repeating.pal
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq),     colour="grey20") +
scale_fill_manual(values=df_sorted$colours) +
guides(fill=FALSE)
install.packages(c("htmltools", "shinyjs"))
install.packages(c("BiodiversityR", "car", "effects", "Rcpp", "readxl", "shiny", "shinyjs", "sjPlot"))
setwd("~/Documents/GitArchive/Studio/Shiny Apps/shine2")
shiny::runApp()
install.packages(c("Hmisc", "lubridate", "Rcmdr", "RcmdrMisc", "sjmisc"))
install.packages("ReacTran")
period_onset <- as.Date(c("2014-07-02", "2014-08-02", "2014-08-29", "2014-09-25",
"2014-10-24", "2014-11-20", "2014-12-22", "2015-01-19"))
days_between_periods <- as.numeric(diff(period_onset))
calc_log_like <- function(days_since_last_period, days_between_periods,
mean_period, sd_period, next_period,
is_fertile, is_pregnant) {
n_non_pregnant_periods <- length(days_between_periods)
log_like <- 0
if(n_non_pregnant_periods > 0) {
log_like <- log_like + sum( dnorm(days_between_periods, mean_period, sd_period, log = TRUE) )
}
log_like <- log_like + log( (1 - 0.19 * is_fertile)^n_non_pregnant_periods )
if(!is_pregnant && next_period < days_since_last_period) {
log_like <- -Inf
}
log_like
}
prop_not_preg_12_cycles <- c( "19-26 years" = 0.08,
"27-34 years" = 0.13,
"35-39 years" = 0.18)
1 - (prop_not_preg_12_cycles - 0.05)^(1/12)
sample_from_prior <- function(n) {
prior <- data.frame(mean_period = rnorm(n, 27.7, 2.4),
sd_period   = abs(rnorm(n, 0, 2.05)),
is_fertile  = rbinom(n, 1, 0.95))
prior$is_pregnant <- rbinom(n, 1, 0.19 * prior$is_fertile)
prior$next_period <- rnorm(n, prior$mean_period, prior$sd_period)
prior$next_period[prior$is_pregnant == 1] <- NA
prior
}
sample_from_prior(n = 4)
sample_from_prior(5)
sample_from_posterior <- function(days_since_last_period, days_between_periods, n_samples) {
prior <- sample_from_prior(n_samples)
log_like <- sapply(1:n_samples, function(i) {
calc_log_like(days_since_last_period, days_between_periods,
prior$mean_period[i], prior$sd_period[i], prior$next_period[i],
prior$is_fertile[i], prior$is_pregnant[i])
})
posterior <- prior[ sample(n_samples, replace = TRUE, prob = exp(log_like)), ]
posterior
}
# THE RESULTS
post <- sample_from_posterior(33, days_between_periods, n_samples = 100)
head(post)
mean(post$is_fertile)
mean(post$is_pregnant)
post <- sample_from_posterior(34, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
post <- sample_from_posterior(35, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
install.packages(c("abind", "caret", "curl", "dendextend", "devtools", "dplyr", "ggvis", "haven", "httr", "jsonlite", "lazyeval", "mime", "multcomp", "oce", "openssl", "plotrix", "plyr", "psych", "purrr", "quantreg", "Rcmdr", "Rcpp", "rmarkdown", "rstudioapi", "sjPlot", "stringi", "tidyr", "vegan", "wakefield", "withr"))
install.packages(c("car", "caret", "curl", "DBI", "digest", "htmlwidgets", "knitr", "RcmdrMisc", "readr", "sjPlot", "sjstats"))
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
biocLite()
biocLite("EBImage")
install.packages("fftwtools")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
biocLite("EBImage")
library(BiocInstaller)
biocLite("EBImage")
biocLite("EBImage")
biocLite("EBImage")
library(EBImage)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))[,,1]
x = thresh(y, 10, 10, 0.05)
x = opening(x, makeBrush(5, shape='disc'))
x = bwlabel(x)
display(y, title="Cell nuclei")
display(y, title="Cell nuclei")
fts = computeFeatures.shape(x)
fts
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
apply(ft, 2, median)
ftp = computeFeatures(x, y, properties=TRUE, xname="nucleus")
ftp = computeFeatures(x, y, properties=TRUE, xname="nucleus")
ftp
fe<-computeFeatures.haralick(x)
fe<-computeFeatures.haralick(x,y)
View(fe)
display(y, title="Cell nuclei")
display(x, title="Cell nuclei")
str(x)
f = system.file("images", "sample-color.png", package="EBImage")
x = readImage(f)
display(x)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(y)
View(fts)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(y)
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))[,,1]
x = thresh(y, 10, 10, 0.05)
x = opening(x, makeBrush(5, shape='disc'))
x = bwlabel(x)
display(y, title="Cell nuclei")
display(x, title="Segmented nuclei")
fts = computeFeatures.shape(x)
fts
## compute features
ft = computeFeatures(x, y, xname="nucleus")
View(ft)
cat("median features are:\n")
apply(ft, 2, median)
install.packages("stringi")
install.packages("ade4")
install.packages("PTAk")
# Remove previous versions of h2o R package
if ("package:h2o" %in% search()) detach("package:h2o", unload=TRUE)
if ("h2o" %in% rownames(installed.packages())) remove.packages("h2o")
# Next, we download R package dependencies
pkgs <- c("methods","statmod","stats","graphics",
"RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (!(pkg %in% rownames(installed.packages()))) install.packages(pkg)
}
# Download h2o package version 3.10.0.6
install.packages("h2o", type = "source",
repos = "http://h2o-release.s3.amazonaws.com/h2o/rel-turing/6/R")
library(devtools)
devtools::install_github("h2oai/sparkling-water", subdir = "/r/rsparkling")
library(sparklyr)
spark_install(version = "1.6.2")
library(sparklyr)
spark_install(version = "1.6.2")
setwd("~/Documents/GitArchive/cvCells/macro-tests")
setwd("~/Documents/GitArchive/cvCells/macro-tests/in-grey-seg")
library(sparklyr) # first for linux: may have to move pre-process
sc <- spark_connect(master = "local") # connect to spark instance
library(caret)
load("array-all.Rdata")
feats <- array.dfs[-1]
descrCor <- cor(feats)
highlyCorDescr <- findCorrelation(descrCor, cutoff = .95)
filteredDescr <- feats[,-highlyCorDescr]
array.all.trim<-cbind(array.dfs[1],filteredDescr)
write.csv(array.all.trim,file = "array.all.trim.csv",row.names = FALSE) # write out feature matrix to .csv
rm(array.dfs,feats,descrCor,highlyCorDescr,filteredDescr,array.all.trim) #clean up
library(dplyr)
features_tbl <- spark_read_csv(sc, name = 'featLib', path = "~/Documents/GitArchive/cvCells/macro-tests/in-grey-seg/array.all.trim.csv")
rf_full_model <- features_tbl %>%
ml_random_forest(rNames_tag ~., type = "classification")
rf_full_predict <- sdf_predict(rf_full_model, features_tbl) %>%
ft_string_indexer("rNames_tag","rNames_idx") %>% collect
table(rf_full_predict$rNames_idx,rf_full_predict$prediction) # print the classification results
ft_string2idx <- features_tbl %>% # mapping of labels to indicies
ft_string_indexer("rNames_tag", "rNames_idx") %>%
ft_index_to_string("rNames_idx", "rNames_remap") %>%
collect
table(ft_string2idx$rNames_idx,ft_string2idx$rNames_remap) # show mapping
