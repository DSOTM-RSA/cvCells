geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = df_class, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$other)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal.trial) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=colours) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=cum.freq) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
outerr$othername <- outerr$drug_name
outerr$othername <- df_count$drug_name
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
outerr.again<-df_count[order(df_count$drug_class),]
View(outerr.again)
pal.test = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.test[[2]] = pal.test[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal.test = unname(unlist(pal.test))
df_count_sorted <- df_count[order(df_count$drug_class),]
df_count_sorted$labOrder <- df_count$drug_name
df_count$colours<-pal.test
View(df_count_sorted)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
df_count_sorted$new<-pal.trial
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=df_count_sorted$labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
pal.test = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.test[[2]] = pal.test[[2]][1:2]
pal.test = unname(unlist(pal.test))
pal.test
df_sorted <- df_count[order(df_count$drug_class),]
View(df_sorted)
df_sorted$labOrder <- df_count$drug_name
df_sorted$colours<-pal.test
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$colours) +
guides(fill=FALSE)
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_sorted$colours) +
guides(fill=FALSE)
repeating.pal = mapply(function(x,y) brewer.pal(x,y), ncol,        c("Set2","Set2","Set2","Set2"))
Alter the plot routine, with `fill` = labOrder.
repeating.pal[[2]] = repeating.pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
repeating.pal = unname(unlist(repeating.pal))
df_count_sorted <- df_count[order(df_count$drug_class),]
df_count_sorted$labOrder <- df_count$drug_name
df_count$colours<-repeating.pal
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq),     colour="grey20") +
scale_fill_manual(values=df_sorted$colours) +
guides(fill=FALSE)
install.packages(c("htmltools", "shinyjs"))
install.packages(c("BiodiversityR", "car", "effects", "Rcpp", "readxl", "shiny", "shinyjs", "sjPlot"))
setwd("~/Documents/GitArchive/Studio/Shiny Apps/shine2")
shiny::runApp()
install.packages(c("Hmisc", "lubridate", "Rcmdr", "RcmdrMisc", "sjmisc"))
install.packages("ReacTran")
period_onset <- as.Date(c("2014-07-02", "2014-08-02", "2014-08-29", "2014-09-25",
"2014-10-24", "2014-11-20", "2014-12-22", "2015-01-19"))
days_between_periods <- as.numeric(diff(period_onset))
calc_log_like <- function(days_since_last_period, days_between_periods,
mean_period, sd_period, next_period,
is_fertile, is_pregnant) {
n_non_pregnant_periods <- length(days_between_periods)
log_like <- 0
if(n_non_pregnant_periods > 0) {
log_like <- log_like + sum( dnorm(days_between_periods, mean_period, sd_period, log = TRUE) )
}
log_like <- log_like + log( (1 - 0.19 * is_fertile)^n_non_pregnant_periods )
if(!is_pregnant && next_period < days_since_last_period) {
log_like <- -Inf
}
log_like
}
prop_not_preg_12_cycles <- c( "19-26 years" = 0.08,
"27-34 years" = 0.13,
"35-39 years" = 0.18)
1 - (prop_not_preg_12_cycles - 0.05)^(1/12)
sample_from_prior <- function(n) {
prior <- data.frame(mean_period = rnorm(n, 27.7, 2.4),
sd_period   = abs(rnorm(n, 0, 2.05)),
is_fertile  = rbinom(n, 1, 0.95))
prior$is_pregnant <- rbinom(n, 1, 0.19 * prior$is_fertile)
prior$next_period <- rnorm(n, prior$mean_period, prior$sd_period)
prior$next_period[prior$is_pregnant == 1] <- NA
prior
}
sample_from_prior(n = 4)
sample_from_prior(5)
sample_from_posterior <- function(days_since_last_period, days_between_periods, n_samples) {
prior <- sample_from_prior(n_samples)
log_like <- sapply(1:n_samples, function(i) {
calc_log_like(days_since_last_period, days_between_periods,
prior$mean_period[i], prior$sd_period[i], prior$next_period[i],
prior$is_fertile[i], prior$is_pregnant[i])
})
posterior <- prior[ sample(n_samples, replace = TRUE, prob = exp(log_like)), ]
posterior
}
# THE RESULTS
post <- sample_from_posterior(33, days_between_periods, n_samples = 100)
head(post)
mean(post$is_fertile)
mean(post$is_pregnant)
post <- sample_from_posterior(34, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
post <- sample_from_posterior(35, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
install.packages(c("abind", "caret", "curl", "dendextend", "devtools", "dplyr", "ggvis", "haven", "httr", "jsonlite", "lazyeval", "mime", "multcomp", "oce", "openssl", "plotrix", "plyr", "psych", "purrr", "quantreg", "Rcmdr", "Rcpp", "rmarkdown", "rstudioapi", "sjPlot", "stringi", "tidyr", "vegan", "wakefield", "withr"))
install.packages(c("car", "caret", "curl", "DBI", "digest", "htmlwidgets", "knitr", "RcmdrMisc", "readr", "sjPlot", "sjstats"))
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
biocLite()
biocLite("EBImage")
install.packages("fftwtools")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
biocLite("EBImage")
library(BiocInstaller)
biocLite("EBImage")
biocLite("EBImage")
biocLite("EBImage")
library(EBImage)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))[,,1]
x = thresh(y, 10, 10, 0.05)
x = opening(x, makeBrush(5, shape='disc'))
x = bwlabel(x)
display(y, title="Cell nuclei")
display(y, title="Cell nuclei")
fts = computeFeatures.shape(x)
fts
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
apply(ft, 2, median)
ftp = computeFeatures(x, y, properties=TRUE, xname="nucleus")
ftp = computeFeatures(x, y, properties=TRUE, xname="nucleus")
ftp
fe<-computeFeatures.haralick(x)
fe<-computeFeatures.haralick(x,y)
View(fe)
display(y, title="Cell nuclei")
display(x, title="Cell nuclei")
str(x)
f = system.file("images", "sample-color.png", package="EBImage")
x = readImage(f)
display(x)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(y)
View(fts)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(y)
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))[,,1]
x = thresh(y, 10, 10, 0.05)
x = opening(x, makeBrush(5, shape='disc'))
x = bwlabel(x)
display(y, title="Cell nuclei")
display(x, title="Segmented nuclei")
fts = computeFeatures.shape(x)
fts
## compute features
ft = computeFeatures(x, y, xname="nucleus")
View(ft)
cat("median features are:\n")
apply(ft, 2, median)
setwd("~/Documents/GitArchive/cvCells/macro-tests")
setwd("~/Documents/GitArchive/cvCells/macro-tests/in-grey-seg")
source('~/Documents/GitArchive/cvCells/macro-tests/haralick.R', echo=TRUE)
View(array.dfs)
rm(list = ls(pattern = "^shapes"))
rm(list = ls(pattern = "^textures"))
View(array.dfs)
refs.all <-list.files(pattern = "*-g-iacu")
segs.all <-list.files(pattern = "*-s-iacu")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <-as.character(strsplit(refs.all,".tif"))
seg <-as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label segmented images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holders for feature-results
writer.1 <-paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <-computeFeatures(seg.labelled,refs.array)
fts.tex <-computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning source file ids to rownames for completeness
rownames(fts.shp) <-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
refs.all <-list.files(pattern = "*-g-iacu")
segs.all <-list.files(pattern = "*-s-iacu")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <-as.character(strsplit(refs.all,".tif"))
seg <-as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label segmented images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holders for feature-results
writer.1 <-paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <-computeFeatures(seg.labelled,refs.array)
fts.tex <-computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning source file ids to rownames for completeness
rownames(fts.shp) <-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
View(shapes1)
View(shapes2)
View(shapes3)
rm(list=ls(pattern = "^fts"))
pieces.shp <-Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <-Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
data.shapes <-do.call(rbind,pieces.shp)
data.textures <-do.call(rbind,pieces.tex)
crt <-which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim <-data.shapes[crt,] # apply to shape data
data.textures.trim <-data.textures[crt,] # apply for textures
array.images <-cbind(data.shapes.trim,data.textures.trim)
write.csv(array.images,file = "array2.csv",row.names = TRUE)
rm(list = ls(pattern = "^shapes"))
rm(list = ls(pattern = "^textures"))
refs.all <-list.files(pattern = "*-g-bspp")
segs.all <-list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <-as.character(strsplit(refs.all,".tif"))
seg <-as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label segmented images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holders for feature-results
writer.1 <-paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <-computeFeatures(seg.labelled,refs.array)
fts.tex <-computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning source file ids to rownames for completeness
rownames(fts.shp) <-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
rm(list=ls(pattern = "^fts"))
pieces.shp <-Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <-Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
data.shapes <-do.call(rbind,pieces.shp)
data.textures <-do.call(rbind,pieces.tex)
crt <-which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim <-data.shapes[crt,] # apply to shape data
data.textures.trim <-data.textures[crt,] # apply for textures
array.images <-cbind(data.shapes.trim,data.textures.trim)
write.csv(array.images,file = "array.csv",row.names = TRUE)
rm(list = ls(pattern = "^shapes"))
rm(list = ls(pattern = "^textures"))
library(stringr)
library(magrittr)
array.dfs <-as.data.frame(array.images)
# create a column of image-names
rNames <-rownames(array.dfs)
rNames.tag <-str_sub(rNames,-4)
array.dfs %<>% cbind(rNames.tag,.)
save(array.dfs,"Bspp.RData")
save(array.dfs)
save(array.dfs,file="Test.Rdata")
save(array.dfs,file="Array1.Rdata")
refs.all <-list.files(pattern = "*-g-iacu")
segs.all <-list.files(pattern = "*-s-iacu")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <-as.character(strsplit(refs.all,".tif"))
seg <-as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label segmented images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holders for feature-results
writer.1 <-paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <-computeFeatures(seg.labelled,refs.array)
fts.tex <-computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning source file ids to rownames for completeness
rownames(fts.shp) <-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
# concenate pieces into one matrix
rm(list=ls(pattern = "^fts"))
pieces.shp <-Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <-Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
# construct lists
data.shapes <-do.call(rbind,pieces.shp)
data.textures <-do.call(rbind,pieces.tex)
# trim data
crt <-which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim <-data.shapes[crt,] # apply to shape data
data.textures.trim <-data.textures[crt,] # apply for textures
# bind rows for full array of features
array.images <-cbind(data.shapes.trim,data.textures.trim)
write.csv(array.images,file = "array2.csv",row.names = TRUE)
rm(list = ls(pattern = "^shapes"))
rm(list = ls(pattern = "^textures"))
library(stringr)
library(magrittr)
array.dfs <-as.data.frame(array.images)
rNames <-rownames(array.dfs)
rNames.tag <-str_sub(rNames,-4)
array.dfs %<>% cbind(rNames.tag,.)
View(array.dfs)
save(array.dfs,file="Array2.Rdata")
load("Array1.Rdata")
arrays.2<-load("Array2.Rdata")
refs.all <-list.files(pattern = "*-g-iacu")
segs.all <-list.files(pattern = "*-s-iacu")
beg = 1
end = as.numeric(length(refs.all))
ref <-as.character(strsplit(refs.all,".tif"))
seg <-as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label segmented images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holders for feature-results
writer.1 <-paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <-computeFeatures(seg.labelled,refs.array)
fts.tex <-computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning source file ids to rownames for completeness
rownames(fts.shp) <-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
# concenate pieces into one matrix
rm(list=ls(pattern = "^fts"))
pieces.shp <-Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <-Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
# construct lists
data.shapes <-do.call(rbind,pieces.shp)
data.textures <-do.call(rbind,pieces.tex)
# trim data
crt <-which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim <-data.shapes[crt,] # apply to shape data
data.textures.trim <-data.textures[crt,] # apply for textures
# bind rows for full array of features
array.images <-cbind(data.shapes.trim,data.textures.trim)
rm(list = ls(pattern = "^shapes"))
rm(list = ls(pattern = "^textures"))
library(stringr)
library(magrittr)
array.dfs.2 <-as.data.frame(array.images)
rNames <-rownames(array.dfs.2)
rNames.tag <-str_sub(rNames,-4)
array.dfs.2 %<>% cbind(rNames.tag,.)
save(array.dfs.2,file="array2.Rdata")
load("Array1.Rdata")
load("array2.Rdata")
rbind(array.dfs,array.dfs.2)
join.df<-rbind(array.dfs,array.dfs.2)
View(join.df)
