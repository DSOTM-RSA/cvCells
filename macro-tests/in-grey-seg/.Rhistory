test <- as_h2o_frame(partitions$test)
h2o.init()
training <- as_h2o_frame(partitions$training)
test <- as_h2o_frame(partitions$test)
training <- as_h2o_frame(x = partitions$training)
training <- as_h2o_frame(sc = sc,x = partitions$training)
sc <- spark_connect("local", version = "1.6.2")
mtcars_tbl <- copy_to(sc, mtcars, "mtcars", overwrite = TRUE)
partitions <- mtcars_tbl %>%
filter(hp >= 100) %>%
mutate(cyl8 = cyl == 8) %>%
sdf_partition(training = 0.5, test = 0.5, seed = 1099)
training <- as_h2o_frame(sc, partitions$training)
test <- as_h2o_frame(sc, partitions$test)
glm_model <- h2o.glm(x = c("wt", "cyl"),
y = "mpg",
training_frame = training,
lambda_search = TRUE)
partitions <- h2o.splitFrame(as_h2o_frame(mtcars_tbl), 0.5))
partitions <- h2o.splitFrame(as_h2o_frame(mtcars_tbl), 0.5)
partitions <- h2o.splitFrame(data = as_h2o_frame(mtcars_tbl), 0.5)
library(sparklyr)
library(rsparkling)
library(dplyr)
sc <- spark_connect("local", version = "1.6.2")
mtcars_tbl <- copy_to(sc, mtcars, "mtcars", overwrite = TRUE)
partitions <- mtcars_tbl %>%
filter(hp >= 100) %>%
mutate(cyl8 = cyl == 8) %>%
sdf_partition(training = 0.5, test = 0.5, seed = 1099)
training <- as_h2o_frame(sc, partitions$training)
test <- as_h2o_frame(sc, partitions$test)
glm_model <- h2o.glm(x = c("wt", "cyl"),
y = "mpg",
training_frame = training,
lambda_search = TRUE)
print(glm_model)
library(ggplot2)
pred <- h2o.predict(glm_model, newdata = test)
# convert from H2O Frame to Spark DataFrame
predicted <- as_spark_dataframe(sc, pred)
actual <- partitions$test %>%
select(mpg) %>%
collect() %>%
`[[`("mpg")
data <- data.frame(
predicted = predicted,
actual    = actual
)
names(data) <- c("predicted", "actual")
ggplot(data, aes(x = actual, y = predicted)) +
geom_abline(lty = "dashed", col = "red") +
geom_point() +
theme(plot.title = element_text(hjust = 0.5)) +
coord_fixed(ratio = 1) +
labs(
x = "Actual Fuel Consumption",
y = "Predicted Fuel Consumption",
title = "Predicted vs. Actual Fuel Consumption"
)
library(dplyr)
sc <- spark_connect("local", version = "1.6.2")
iris_tbl <- copy_to(sc, iris, "iris", overwrite = TRUE)
iris_tbl
iris_hf <- as_h2o_frame(sc, iris_tbl)
kmeans_model <- h2o.kmeans(training_frame = iris_hf,
x = 3:4,
k = 3,
seed = 1)
h2o.centers(kmeans_model)
pca_model <- h2o.prcomp(training_frame = iris_hf,
x = 1:4,
k = 4,
seed = 1)
print(pca_model)
y <- "Species"
x <- setdiff(names(iris_hf), y)
iris_hf[,y] <- as.factor(iris_hf[,y])
splits <- h2o.splitFrame(iris_hf, seed = 1)
rf_model <- h2o.randomForest(x = x,
y = y,
training_frame = splits[[1]],
validation_frame = splits[[2]],
nbins = 32,
max_depth = 5,
ntrees = 20,
seed = 1)
h2o.confusionMatrix(rf_model, valid = TRUE)
h2o.varimp_plot(rf_model)
gbm_model <- h2o.gbm(x = x,
y = y,
training_frame = splits[[1]],
validation_frame = splits[[2]],
ntrees = 20,
max_depth = 3,
learn_rate = 0.01,
col_sample_rate = 0.7,
seed = 1)
h2o.confusionMatrix(gbm_model, valid = TRUE)
path <- system.file("extdata", "prostate.csv", package = "h2o")
prostate_df <- spark_read_csv(sc, "prostate", path)
head(prostate_df)
prostate_hf <- as_h2o_frame(sc, prostate_df)
splits <- h2o.splitFrame(prostate_hf, seed = 1)
y <- "VOL"
#remove response and ID cols
x <- setdiff(names(prostate_hf), c("ID", y))
dl_fit <- h2o.deeplearning(x = x, y = y,
training_frame = splits[[1]],
epochs = 15,
activation = "Rectifier",
hidden = c(10, 5, 10),
input_dropout_ratio = 0.7)
h2o.performance(dl_fit, newdata = splits[[2]])
splits <- h2o.splitFrame(prostate_hf, seed = 1)
y <- "VOL"
#remove response and ID cols
x <- setdiff(names(prostate_hf), c("ID", y))
gbm_params1 <- list(learn_rate = c(0.01, 0.1),
max_depth = c(3, 5, 9),
sample_rate = c(0.8, 1.0),
col_sample_rate = c(0.2, 0.5, 1.0))
gbm_grid1 <- h2o.grid("gbm", x = x, y = y,
grid_id = "gbm_grid1",
training_frame = splits[[1]],
validation_frame = splits[[1]],
ntrees = 100,
seed = 1,
hyper_params = gbm_params1)
gbm_gridperf1 <- h2o.getGrid(grid_id = "gbm_grid1",
sort_by = "mse",
decreasing = FALSE)
print(gbm_gridperf1)
gbm_params2 <- list(learn_rate = seq(0.01, 0.1, 0.01),
max_depth = seq(2, 10, 1),
sample_rate = seq(0.5, 1.0, 0.1),
col_sample_rate = seq(0.1, 1.0, 0.1))
search_criteria2 <- list(strategy = "RandomDiscrete",
max_models = 50)
gbm_grid2 <- h2o.grid("gbm", x = x, y = y,
grid_id = "gbm_grid2",
training_frame = splits[[1]],
validation_frame = splits[[2]],
ntrees = 100,
seed = 1,
hyper_params = gbm_params2,
search_criteria = search_criteria2)
gbm_params2 <- list(learn_rate = seq(0.01, 0.1, 0.01),
max_depth = seq(2, 10, 1),
sample_rate = seq(0.5, 1.0, 0.1),
col_sample_rate = seq(0.1, 1.0, 0.1))
search_criteria2 <- list(strategy = "RandomDiscrete",max_runtime_secs=60)
gbm_grid2 <- h2o.grid("gbm", x = x, y = y,
grid_id = "gbm_grid2",
training_frame = splits[[1]],
validation_frame = splits[[2]],
ntrees = 100,
seed = 1,
hyper_params = gbm_params2,
search_criteria = search_criteria2)
gbm_gridperf2 <- h2o.getGrid(grid_id = "gbm_grid2",
sort_by = "mse",
decreasing = FALSE)
gbm_gridperf2@summary_table[1,]
h2o.saveModel(my_model, path = "/Users/danny/h2omodels")
mod<-gbm_gridperf2@summary_table[1,]
h2o.saveModel(mod, path = "/Users/danny")
h2o.saveModel(dl_fit, path = "/Users/danny")
plot(cars)
plot(cars)
library(readr)
MAP_dat <- read_delim("~/Research/MAP/data/MAP_dat.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(MAP_dat)
library(readr)
MAP_dat <- read_delim("~/Research/MAP/data/MAP_dat.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(MAP_dat)
View(MAP_dat)
library(readxl)
GeoB20305_7_alldata <- read_excel("~/Research/MAP/data/GeoB20305-7_alldata.xlsx",
sheet = "Tabelle1")
View(GeoB20305_7_alldata)
library(readxl)
test <- read_excel("~/Research/MAP/data/GeoB20305-7_alldata.xlsx")
View(GeoB20305_7_alldata)
View(test)
library(EBImage)
sp.sec<-"ipat"
# basic book-keeping -- list all files
refs.all <-list.files(pattern = paste0("*-g-",sp.sec))
segs.all <-list.files(pattern = paste0("*-g-",sp.sec))
setwd("~/Research/cvCells/macro-tests")
setwd("~/Research/cvCells/macro-tests/in-grey-seg")
refs.all <-list.files(pattern = "*-g-")
segs.all <-list.files(pattern = "*-s-")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <-as.character(strsplit(refs.all,".tif"))
seg <-as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label segmented images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holders for feature-results
writer.1 <-paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <-computeFeatures(seg.labelled,refs.array)
fts.tex <-computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning source file ids to rownames for completeness
rownames(fts.shp) <-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
ref[5]
refs.all <-list.files(pattern = "*-g-")
segs.all <-list.files(pattern = "*-s-")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <-as.character(strsplit(refs.all,".tif"))
seg <-as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label segmented images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holders for feature-results
writer.1 <-paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <-computeFeatures(seg.labelled,refs.array)
fts.tex <-computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning source file ids to rownames for completeness
rownames(fts.shp) <-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
rm(list=ls(pattern = "^fts"))
pieces.shp <-Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <-Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
data.shapes <-do.call(rbind,pieces.shp)
data.textures <-do.call(rbind,pieces.tex)
pieces.tex <-Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
data.shapes <-do.call(rbind,pieces.shp)
data.textures <-do.call(rbind,pieces.tex)
data.textures[1]
data.textures[2]
data.textures[3]
data.textures[[1]]
data.textures[[2]]
View(textures6)
crt <-which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim <-data.shapes[crt,] # apply to shape data
data.textures.trim <-data.textures[crt,] # apply for textures
View(data.shapes.trim)
View(data.textures.trim)
View(data.shapes.trim)
View(data.textures.trim)
array.images <-cbind(data.shapes.trim,data.textures.trim)
sp.sec<-"all"
write.csv(array.images,file = paste0("array","-",sp.sec,".csv"),row.names = TRUE)
rm(list = ls(pattern = "^shapes"))
rm(list = ls(pattern = "^textures"))
library(stringr)
library(magrittr)
# to DF - change name here!!
array.dfs <-as.data.frame(array.images)
rNames <-rownames(array.dfs)
rNames.tag <-str_sub(rNames,-4)
array.dfs %<>% cbind(rNames.tag,.)
save(array.dfs,file="array.Rdata")
save(array.dfs,file=paste0("array",sp.sec,".Rdata")) # export as .Rdata file
save(array.dfs,file=paste0("array","-",sp.sec,".Rdata")) # export as .Rdata file
library(FFTrees)
library(dplyr)
load("array-all.Rdata")
load("array-all.Rdata")
sp.1<-"iacu" # assign species 1
sp.2<-"ipat" # assign species 2
dat.bin <- array.dfs %>% filter(.,rNames.tag == sp.1 | rNames.tag == sp.2)
sp.0<-"iacu" # assign species 0
sp.1<-"ipat" # assign species 1
dat.bin <- array.dfs %>% filter(.,rNames.tag == sp.0 | rNames.tag == sp.1)
dat.bin$tagBinary <- 0
dat.bin$tagBinary[dat.bin$rNames.tag == sp.1] <-1
dat.bin$tagBinary
View(array.dfs)
View(dat.bin)
dat.bin.fft <- FFTrees(formula = tagBinary~.,
data = dat.bin[,2:117]) # use all features outside label
dat.bin.fft
plot(dat.bin.fft,
main = "Dino FFT",
decision.names = c(sp.0, sp.1))
str(dat.bin.fft)
dat.bin.fft$cue.accuracies
dat.bin.fft$tree.definitions
View(dat.bin)
dat.bin.fft$tree.stats
dat.bin.fft$decision
plot(dat.bin.fft,
main = "Dino FFT",
decision.names = c(sp.0, sp.1),tree = 4)
library(caret)
library(AppliedPredictiveModeling)
transparentTheme(trans = .9)
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),
auto.key = list(columns = 2))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2), key = list(text=list(levels(dat.bin$tagBinary))))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2), key = list(text=list(levels(dat.bin$rNames.tag))))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2), key = list(text=list(levels(dat.bin$rNames.tag)),points=list(pch=1:nlevels(dat.bin$rNames.tag))))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2), key = list(text=list(levels(dat.bin$rNames.tag)),lines=list(pch=1:nlevels(dat.bin$rNames.tag))))
col <- lattice.theme$superpose.symbol$col
transparentTheme(trans = .9)
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2), key = list(text=list(levels(dat.bin$rNames.tag)),lines=list(pch=1:nlevels(dat.bin$rNames.tag),col=col)))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2), key = list(text=list(levels(dat.bin$rNames.tag)),lines=list(col=col,col=col)))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2), key = list(text=list(levels(dat.bin$rNames.tag)),lines=list(col=col)))
text=list(levels(dat.bin$tagBinary))
text=list(as.character(dat.bin$tagBinary))
text=list(as.character(levels(dat.bin$tagBinary)))
text=list(as.character(factor(dat.bin$tagBinary)))
text=list(levels(dat.bin$tagBinary))
text=list(levels(dat.bin$tagBinary))
text=list(levels(dat.bin$rNames.tag))
text=list(levels(dat.bin$rNames.tag))[3:4]
text=list(levels(dat.bin$rNames.tag))[3]
text=list(levels(dat.bin$rNames.tag))
text[1]
text[[1]]
text[[,1]]
text[[1,]]
text[[[1]]]
text[1]
text[1][1]
text[1][,1]
text[1][1,]
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),auto.key = list(columns = 2))
?featurePlot
transparentTheme(trans = .9)
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "box",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),auto.key = list(columns = 2))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "strip",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),auto.key = list(columns = 2))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "pairs",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),auto.key = list(columns = 2))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "ellipse",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),auto.key = list(columns = 2))
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "ellipse"),
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "ellipse")
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "pairs")
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "box")
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "box",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),auto.key = list(columns = 2))
transparentTheme(trans = .9)
featurePlot(x = dat.bin[, 91:100],
y = dat.bin$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(5, 2),auto.key = list(columns = 2))
install.packages(c("codetools", "pangaear", "shiny", "visNetwork"))
