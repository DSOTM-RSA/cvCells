cat(aread("MarcinKosinski/archivist.github/eRum2016/010e596"))
library(archivist.github)
authoriseGitHub(b3adb2a6555505989161,ea50a45a3f2ba146b2560927643adaf4390fb751)
authoriseGitHub("b3adb2a6555505989161","ea50a45a3f2ba146b2560927643adaf4390fb751")
lapply()
install.packages(c("DiagrammeR", "OpenMx", "partools", "sdm"))
install.packages("Rcpp")
install.packages(c("abind", "cellranger", "commonmark", "CORElearn", "curl", "ggvis", "mgcv", "plotrix", "psychotools", "RcppArmadillo", "RSVGTipsDevice"))
library(dplyr)
library(Lahman)
batting <- select(tbl_df(Batting), playerID, yearID, teamID, G, AB:H)
batting <- arrange(batting, playerID, yearID, teamID)
View(batting)
players <- group_by(batting, playerID)
filter(players, min_rank(desc(H)) <= 2 & H > 0)
mutate(players, G_rank = min_rank(G))
filter(players, G > lag(G))
mutate(players, G_change = (G - lag(G)) / (yearID - lag(yearID)))
filter(players, G > mean(G))
mutate(players, G_z = (G - mean(G)) / sd(G))
filter(players, cume_dist(desc(G)) < 0.1)
by_team_player <- group_by(batting, teamID, playerID)
View(by_team_player)
by_team <- summarise(by_team_player, G = sum(G))
View(by_team)
by_team_quartile <- group_by(by_team, quartile = ntile(G, 4))
View(by_team_quartile)
summarise(by_team_quartile, mean(G))
View(by_team_quartile)
mutate(players, G_delta = G - lag(G))
filter(players, teamID != lag(teamID))
df <- data.frame(year = 2000:2005, value = (0:5) ^ 2)
scrambled <- df[sample(nrow(df)), ]
View(scrambled)
View(df)
View(scrambled)
View(df)
wrong <- mutate(scrambled, running = cumsum(value))
View(wrong)
arrange(wrong, year)
right <- mutate(scrambled, running = order_by(year, cumsum(value)))
View(right)
arrange(right, year)
filter(players, cumany(G > 150))
x <- 1:10
y <- 10:1
order_by(y, cumsum(x))
filter(players, G > mean(G))
mutate(players, career_year = yearID - min(yearID) + 1)
mutate(players, G_z = (G - mean(G)) / sd(G))
R
archivist::aread('pbiecek/SmarterPoland_blog/arepo/e44de65f1e56ea42d2df2598c083d1ce')
1
archivist::aread('pbiecek/SmarterPoland_blog/arepo/e44de65f1e56ea42d2df2598c083d1ce')
archivist::aread('pbiecek/SmarterPoland_blog/arepo/e44de65f1e56ea42d2df2598c083d1ce')
pl <- archivist::aread('pbiecek/SmarterPoland_blog/arepo/e44de65f1e56ea42d2df2598c083d1ce')
m1 <- matrix(c(1,2,1,6,3,7,4,2,6,8,11,15), ncol=4, byrow = TRUE)
View(m1)
t(apply(
X = m1,
# Take each row from the matrix
MARGIN = 1,
FUN = function(x) {
sapply(
X = x,
# Now go through each element of that row
FUN = function(y) {
# Your conditions
y %in% c(x - 1) | y %in% c(x + 1)
}
)
}
))
sample(4,2,replace=FALSE)
sample(2,4,replace=FALSE)
factorial(4)
factorial(4)/(factorial(2)*factorial(2))
factorial(4)/(factorial(3)*factorial(3))
factorial(4)/(factorial(2)*factorial(2))
factorial(3)/(factorial(2)*factorial(2))
factorial(3)/(factorial(2)*factorial(1))
factorial(6)/(factorial(2)*factorial(4))
factorial(6)
factorial(9)
factorial(12)/factorial(9)*6
factorial(4)/factorial(6)*1
a<-t(apply(
X = m1,
# Take each row from the matrix
MARGIN = 1,
FUN = function(x) {
sapply(
X = x,
# Now go through each element of that row
FUN = function(y) {
# Your conditions
y %in% c(x - 1) | y %in% c(x + 1)
}
)
}
))
factorial(a)
sum(a)
rowsum(a)
rowSums(a)
small.func <- fucntion(x,k) {
top<-rowSums(x)
bot<-factorial(2)*factorial(top-k)
ans <- top/bot
}
small.func <- fucntion(x,k) {
top<-rowSums(x)
small.func <- function(x,k) {
top<-rowSums(x)
bot<-factorial(2)*factorial(top-k)
ans <- top/bot
}
small.func <- function(x,k) {
top<-factorial(rowSums(x))
bot<-factorial(2)*factorial(top-2)
ans <- top/bot
}
small.func <- function(x,k) {
top<-factorial(rowSums(x))
bot<-factorial(k)*factorial(top-k)
ans <- top/bot
}
samll.func(a,2)
small.func(a,2)
rowSums(a[1])
rowSums(a[,1])
rowSums(a[1,])
rowSums(a[1])
rowSums(a)
rowSums(a)[1]
small.func <- function(x,k) {
small.func <- function(x,k) {
small.func <- function(x,k) ^{
top<-factorial(rowSums(x[1]))
bot<-factorial(k)*factorial(top-k)
ans <- top/bot
small.func <- function(x,k) ^{
top<-factorial(rowSums(x[1]))
small.func <- function(x,k) {
top<-factorial(rowSums(x[1]))
bot<-factorial(k)*factorial(top-k)
ans <- top/bot
}
samll.func(a,2)
small.func(a,2)
small.func <- function(x,k) {
top<-factorial(rowSums(x)[1])
bot<-factorial(k)*factorial(top-k)
ans <- top/bot
}
top<-factorial(rowSums(x)[1])
small.func(a,2)
out<-small.func(a,2)
small.func <- function(x,k) {
top<-factorial(rowSums(x)[1])
bot<-factorial(k)*(factorial(top-k))
ans <- top/bot
}
out<-small.func(a,2)
small.func <- function(x,k) {
top<-factorial(rowSums(x)[1])
bot<-factorial(k)
mid <- factorial(rowSums(x)[1]-k)
end <- bot*mid
ans <- top/end
}
out<-small.func(a,2)
hours <-c(10,12,14)
net.price<-c(8,14,12)
hours >net.price
temp.a <-c(10,12,14)
temp.b<-c(8,14,12)
temp.a > temp.b
test <- function(a,b) {
if a > b
na.omit(c)
}
test <- function(a,b) {
if (a > b)
na.omit(c)
}
test <- function(a,b,c) {
if (a > b)
na.omit(c)
}
c<-cbind(a,b)
all.temps<-cbind(temp.a,temp.b)
all.temps
all.temps<-data.frame(cbind(temp.a,temp.b) )
View(all.temps)
temp.a
temp.b
test(temp.a,temp.b,all.temps)
test <- function(a,b,c) {
if (a > b) <-c*2
}
test <- function(a,b,c) {
if (a > b) c<-c*2
}
test(temp.a,temp.b,all.temps)
View(all.temps)
test <- function(a,b,c) {
if (a > b)
}
test <- function(a,b,c) {
c <-a > b
}
test <- function(a,b,c) {
res <- (a > b)
return(res)
}
test(temp.a,temp.b,all.temps)
test <- function(a,b,c) {
res <- (a > b)
#return(res)
other<-c[res,]
return(other)
}
test(temp.a,temp.b,all.temps)
celaned.temps<-test(temp.a,temp.b,all.temps)
View(celaned.temps)
test
test <- function(a,b,c,val=2) {
res <- (a > b)
#return(res)
other<-c[res,]
return(other)
}
test
celaned.temps<-test(temp.a,temp.b,r)
celaned.temps<-test(temp.b,temp.a,all.temps)
View(celaned.temps)
test <- function(values1,values2,all.data.together) {
res <- (values1 > values2)
#return(res)
other<-all.data.together[res,]
return(other)
}
test
test(temp.b,temp.a,all.temps)
library(vegan)
data(varespec)
vare.dca <- decorana(varespec)
View(varespec)
rowSums(varespec)
vare.dca
summary(vare.dca)
plot(vare.dca)
data(dune)
View(dune)
dis <- vegdist(dune)
str(dis)
m <- monoMDS(dis, model = "loc")
m
plot(m)
m <- monoMDS(dis, model = "global")
plot(m)
install.packages(c("adehabitatLT", "adehabitatMA", "archivist.github", "arm", "BiodiversityR", "dendextend", "deSolve", "earth", "enpls", "googleVis", "h2o", "imager", "irlba", "Lahman", "lattice", "Matrix", "nor1mix", "numDeriv", "pbapply", "plotmo", "qgraph", "quantreg", "Rcmdr", "Rcpp", "RcppArmadillo", "rgl", "rmdformats", "rrcov", "selectr", "semTools", "sjstats", "spacetime", "spam", "SparseM", "statmod", "stochvol", "sunburstR", "tibble", "tokenizers", "urca", "urltools"))
blindLabels <- function(n=30, length=3){
label <- c(1:n)
for (i in 1:n)
{
label[i] <- paste(sample(c(0:9,letters,LETTERS),
length, replace = TRUE),collpase="")
}
return(label)
}
blindLabels
blindLabels()
blindLabels <- function(n=30, length=3){
label <- c(1:n)
for (i in 1:n)
{
label[i] <- paste(sample(c(0:9,letters,LETTERS),
length, replace = TRUE),collapse="")
}
return(label)
}
blindLabels()
nums <-seq(1:5,length=30)
nums <-rep(seq(1:5),6)
nums <-rep(seq(1:6),5)
desc <-rep(seq("a","b"),15)
desc <-rep(c("a","b"),15)
yr <- rep(c(1,2,3,4,5),4)
yr
nums <-rep(seq(1:6),5)
yr <- rep(1:5,each=6)
desc <-rep(c("a","b"),15)
LowerTrap <-blindLabels()
nums <-rep(seq(1:6),5)
yr <- rep(1:5,each=6)
desc <-rep(c("a","b"),15)
CBLowLabels<-cbind(LowerTrap,nums,yr,desc)
View(CBLowLabels)
save(CBLowLabels,file = "CBLowerLabels.Rda")
install.packages(c("FME", "forecast", "globals", "lavaan", "packrat", "permute", "plotmo", "psychotools", "vegan"))
install.packages(c("DBI", "gam", "OpenStreetMap", "RandomFields", "RandomFieldsUtils", "RefManageR", "shiny", "StanHeaders", "stringdist"))
devtools::install_github("ismayc/thesisdown")
devtools::install_github("ismayc/thesisdown")
?update.packages
update.packages(checkBuilt = TRUE)
devtools::install_github("ismayc/thesisdown")
install.packages("magick")
install.packages("mregions")
install.packages(c("curl", "ezknitr", "janeaustenr", "mapview", "psych", "remote", "RgoogleMaps", "vcd", "waffle"))
library(tidyr)
library(dplyr)
table1
table1  %>% mutate(rate = cases/population *10000)
table1  %>%  count(year, wt = cases)
table1  %>%  count(year)
table1  %>%  count(year, wt = population)
table1  %>%  count(year, wt = cases)
library(ggplot2)
ggplot(table1,aes(year,cases))+geom_line(aes(group=country),colour = "grey50") + geom_point(aes(colour=country))
table2
table4a
table4a  %>% gather(`1999`,`2000`,key="year",value="cases")
table4b
table4b  %>% gather(`1999`,`2000`, key = "year", value = "population")
table4a<-table4a  %>% gather(`1999`,`2000`,key="year",value="cases")
table4b<-table4b  %>% gather(`1999`,`2000`, key = "year", value = "population")
table4a
table4b
left_join(tidy4a,tidy4b)
left_join(table4a,table4b)
spread(table3, key = type, value = count)
spread(table2, key = type, value = count)
table2
table3
table3  %>% seperate(rate, into = c("cases","population"))
table3  %>% separate(rate, into = c("cases","population"))
table3  %>% separate(rate, into = c("cases","population"),sep="/")
table3  %>% separate(rate, into = c("cases","population"),sep="/",convert=TRUE)
table3  %>% separate(year, into = c("century","year"),sep=2)
table5  %>% unite(new,century,year)
table5  %>% unite(new,century,year,sep="")
tibble::tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
test<-tibble::tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
test %>% separate(one,fill = "left")
test %>% separate(fill = "left")
test %>% separate(one,fill = "left")
test %>% separate(one,fill = "right")
test %>% separate(one,extra = "merge")
test %>% separate(one,extra = "warn")
test %>% separate("one",extra = "warn")
stocks <- data_frame(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
stovks  %>% spread(year,return)
stocks  %>% spread(year,return)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks  %>% complete(year,qtr)
treatment <- frame_data(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment
treatment  %>% fill(person)
who
who1 <- who  %>% gather(new_sp_m014:newrel_f65,key="key",values="cases",na.rm=TRUE)
who1 <- who %>%
gather(new_sp_m014:newrel_f65, key = "key", value = "cases", na.rm = TRUE)
who1
who1  %>% count(key)
who2 <- who1  %>% mutate(key=stringr::str_replace(key,"newrel","new_rel"))
who2
who3 <- who2  %>% seperate(key, c("new","type","sexage"),sep="_")
who3 <- who2  %>% separate(key, c("new","type","sexage"),sep="_")
who3
who3  %>% count(new)
who4  <-who3  %>% select(-new,-iso2,-iso3)
who4
who5 <- who4  %>% separate(sexage,c("sex","age"),sep="1")
who5
who5 <- who4  %>% separate(sexage,c("sex","age"),sep=1)
who5
summary(who5)
who
install.packages(c("curl", "irlba", "neotoma", "partykit", "spdep", "survey"))
install.packages(c("geepack", "haven", "lavaan", "MBESS", "MKmisc", "pbapply", "sjmisc"))
install.packages(c("kernlab", "stringi"))
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
View(x)
apply(x,2, function(x) exp(-(x[]-mean(x))^2/2*sd(x)))
apply(x,2, function(x) exp(-(x[]-mean(x)-sd(x))^2/2*sd(x)))
library(caret)
setwd("~/Research/cvCells/macro-tests/in-grey-seg")
load("array.Rdata")
load("array2.Rdata")
join.df<-rbind(array.dfs,array.2.dfs)
join.df$tagBinary <- 0
join.df$tagBinary[join.df$rNames.tag == "iacu"] <- 1
join.df.trim <- join.df[,-1]
View(join.df.trim)
transparentTheme(trans = .9)
featurePlot(x = join.df.trim[, 6:9],
y = join.df.trim$tagBinary,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 3))
library(AppliedPredictiveModeling)
transparentTheme(trans = .9)
featurePlot(x = join.df.trim[, 6:9],
y = join.df.trim$tagBinary,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 3))
featurePlot(x = join.df.trim[, 6:9],
y = join.df.trim$tagBinary,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 4))
featurePlot(x = join.df.trim[, 6:9],
y = join.df.trim$tagBinary,
plot = "density")
a<-featurePlot(x = join.df.trim[, 6:9],
y = join.df.trim$tagBinary,
plot = "density")
View(join.df.trim)
str(join.df.trim)
str(join.df.trim$tagBinary)
load("array.Rdata")
load("array2.Rdata")
join.df<-rbind(array.dfs,array.2.dfs)
join.df$tagBinary <- 0
join.df$tagBinary[join.df$rNames.tag == "iacu"] <- 1
load("array.Rdata")
load("array2.Rdata")
join.df<-rbind(array.dfs,array.2.dfs)
join.df$rNames.tag
View(join.df)
transparentTheme(trans = .9)
featurePlot(x = join.df[, 7:10],
y = join.df.trim$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 4))
featurePlot(x = join.df[, 7:10],
y = join.df$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 4))
View(join.df)
featurePlot(x = join.df[, 91:94],
y = join.df$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 4))
featurePlot(x = join.df[, 95:98],
y = join.df$rNames.tag,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 4))
