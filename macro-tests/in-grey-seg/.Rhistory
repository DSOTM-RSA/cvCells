install.packages(c("htmltools", "shinyjs"))
install.packages(c("BiodiversityR", "car", "effects", "Rcpp", "readxl", "shiny", "shinyjs", "sjPlot"))
setwd("~/Documents/GitArchive/Studio/Shiny Apps/shine2")
shiny::runApp()
install.packages(c("Hmisc", "lubridate", "Rcmdr", "RcmdrMisc", "sjmisc"))
install.packages("ReacTran")
period_onset <- as.Date(c("2014-07-02", "2014-08-02", "2014-08-29", "2014-09-25",
"2014-10-24", "2014-11-20", "2014-12-22", "2015-01-19"))
days_between_periods <- as.numeric(diff(period_onset))
calc_log_like <- function(days_since_last_period, days_between_periods,
mean_period, sd_period, next_period,
is_fertile, is_pregnant) {
n_non_pregnant_periods <- length(days_between_periods)
log_like <- 0
if(n_non_pregnant_periods > 0) {
log_like <- log_like + sum( dnorm(days_between_periods, mean_period, sd_period, log = TRUE) )
}
log_like <- log_like + log( (1 - 0.19 * is_fertile)^n_non_pregnant_periods )
if(!is_pregnant && next_period < days_since_last_period) {
log_like <- -Inf
}
log_like
}
prop_not_preg_12_cycles <- c( "19-26 years" = 0.08,
"27-34 years" = 0.13,
"35-39 years" = 0.18)
1 - (prop_not_preg_12_cycles - 0.05)^(1/12)
sample_from_prior <- function(n) {
prior <- data.frame(mean_period = rnorm(n, 27.7, 2.4),
sd_period   = abs(rnorm(n, 0, 2.05)),
is_fertile  = rbinom(n, 1, 0.95))
prior$is_pregnant <- rbinom(n, 1, 0.19 * prior$is_fertile)
prior$next_period <- rnorm(n, prior$mean_period, prior$sd_period)
prior$next_period[prior$is_pregnant == 1] <- NA
prior
}
sample_from_prior(n = 4)
sample_from_prior(5)
sample_from_posterior <- function(days_since_last_period, days_between_periods, n_samples) {
prior <- sample_from_prior(n_samples)
log_like <- sapply(1:n_samples, function(i) {
calc_log_like(days_since_last_period, days_between_periods,
prior$mean_period[i], prior$sd_period[i], prior$next_period[i],
prior$is_fertile[i], prior$is_pregnant[i])
})
posterior <- prior[ sample(n_samples, replace = TRUE, prob = exp(log_like)), ]
posterior
}
# THE RESULTS
post <- sample_from_posterior(33, days_between_periods, n_samples = 100)
head(post)
mean(post$is_fertile)
mean(post$is_pregnant)
post <- sample_from_posterior(34, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
post <- sample_from_posterior(35, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
install.packages(c("abind", "caret", "curl", "dendextend", "devtools", "dplyr", "ggvis", "haven", "httr", "jsonlite", "lazyeval", "mime", "multcomp", "oce", "openssl", "plotrix", "plyr", "psych", "purrr", "quantreg", "Rcmdr", "Rcpp", "rmarkdown", "rstudioapi", "sjPlot", "stringi", "tidyr", "vegan", "wakefield", "withr"))
install.packages(c("car", "caret", "curl", "DBI", "digest", "htmlwidgets", "knitr", "RcmdrMisc", "readr", "sjPlot", "sjstats"))
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
biocLite()
biocLite("EBImage")
install.packages("fftwtools")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
biocLite("EBImage")
library(BiocInstaller)
biocLite("EBImage")
biocLite("EBImage")
biocLite("EBImage")
library(EBImage)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))[,,1]
x = thresh(y, 10, 10, 0.05)
x = opening(x, makeBrush(5, shape='disc'))
x = bwlabel(x)
display(y, title="Cell nuclei")
display(y, title="Cell nuclei")
fts = computeFeatures.shape(x)
fts
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
apply(ft, 2, median)
ftp = computeFeatures(x, y, properties=TRUE, xname="nucleus")
ftp = computeFeatures(x, y, properties=TRUE, xname="nucleus")
ftp
fe<-computeFeatures.haralick(x)
fe<-computeFeatures.haralick(x,y)
View(fe)
display(y, title="Cell nuclei")
display(x, title="Cell nuclei")
str(x)
f = system.file("images", "sample-color.png", package="EBImage")
x = readImage(f)
display(x)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(y)
View(fts)
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))
display(y)
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
ft = computeFeatures(x, y, xname="nucleus")
cat("median features are:\n")
y = readImage(system.file("images", "nuclei.tif", package="EBImage"))[,,1]
x = thresh(y, 10, 10, 0.05)
x = opening(x, makeBrush(5, shape='disc'))
x = bwlabel(x)
display(y, title="Cell nuclei")
display(x, title="Segmented nuclei")
fts = computeFeatures.shape(x)
fts
## compute features
ft = computeFeatures(x, y, xname="nucleus")
View(ft)
cat("median features are:\n")
apply(ft, 2, median)
setwd("~/Documents/GitArchive/cvCells/macro-tests")
setwd("~/Documents/GitArchive/cvCells/macro-tests/in-grey-seg")
filenames.all <- list.files()
filenames.all <- list.files(pattern = *-g-)
filenames.all <- list.files(pattern = "*-g-")
filenames.all <- list.files(pattern = "*-g-bspp")
end = as.numeric(length(filenames.all))
beg = 1
red <- as.character(strsplit(filenames.all,".tif"))
?assign
library(EBImage)
segs.all <- list.files(pattern = "*-s-bspp")
seg <- as.character(strsplit(filenames.all,".tif"))
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(filenames.all))
ref <- as.character(strsplit(filenames.all,".tif"))
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
ref <- as.character(strsplit(refs.all,".tif"))
seg <- as.character(strsplit(segs.all,".tif"))
for (i in beg:end){
refs.array <-read.Image(refs.all[i])
seg.array <-read.Image(segs.all[i])
seg.labelled <-bwlabel(segs.all[i])
fts <- computeFeatures(seg.labelled[i],refs.array[i])
}
library(EBImage)
for (i in beg:end){
refs.array <-read.Image(refs.all[i])
seg.array <-read.Image(segs.all[i])
seg.labelled <-bwlabel(segs.all[i])
fts <- computeFeatures(seg.labelled[i],refs.array[i])
}
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(segs.all[i])
fts <- computeFeatures(seg.labelled[i],refs.array[i])
}
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(segs.array)
fts <- computeFeatures(seg.labelled,refs.array)
}
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
fts <- computeFeatures(seg.labelled,refs.array)
}
beg = 1
end = as.numeric(length(refs.all))
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array[i])
fts <- computeFeatures(seg.labelled[i],refs.array[i])
}
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
k = 6
Run = matrix(data=NA,nrow=k,ncol = 89)
fts <- computeFeatures(seg.labelled,refs.array)
Run[beg,] <- fts
}
View(Run)
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
k = 20
Run = matrix(data=NA,nrow=k,ncol = 89)
fts <- computeFeatures(seg.labelled,refs.array)
Run[beg,] <- fts
}
View(fts)
View(Run)
k = 200
Run = matrix(data=NA,nrow=k,ncol = 89)
# main loop
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
fts <- computeFeatures(seg.labelled,refs.array)
Run[beg,] <- fts
}
View(Run)
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
writer3 <- paste0("List",i)
fts <- computeFeatures(seg.labelled,refs.array)
assign(writer3,fts)
#Run[beg,] <- fts
}
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
ref <- as.character(strsplit(refs.all,".tif"))
seg <- as.character(strsplit(segs.all,".tif"))
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
writer.features <- paste0("features",i)
fts <- computeFeatures(seg.labelled,refs.array)
assign(write.features,fts)
#Run[beg,] <- fts
}
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
ref <- as.character(strsplit(refs.all,".tif"))
seg <- as.character(strsplit(segs.all,".tif"))
#k = 200
#Run = matrix(data=NA,nrow=k,ncol = 89)
# main loop
for (i in beg:end){
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
writer.features <- paste0("features",i)
fts <- computeFeatures(seg.labelled,refs.array)
assign(writer.features,fts)
#Run[beg,] <- fts
}
rm(list=ls(pattern = "^fts"))
dfs <- Filter(function(x) is(x, "data.frame"),mget(ls()))
dfs <- Filter(function(x) is(x, "matrix"),mget(ls()))
all.data <-do.call(rbind,dfs)
View(all.data)
str(all.data)
View(all.data)
crt = which(all.data[,6]>=10000) # size criteria here
all.data.trim = all.data[crt,]
View(all.data.trim)
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <- as.character(strsplit(refs.all,".tif"))
seg <- as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holder for feature-results
writer.1 <- paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <- computeFeatures(seg.labelled,refs.array)
fts.tex <- computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
rm(list=ls(pattern = "^fts"))
pieces <- Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.shp <- Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <- Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
data.shapes<-do.call(rbind,pieces.shp)
data.textures<-do.call(rbind,pieces.tex)
crt = which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim = data.shapes[crt,] # apply to shape data
data.textures.trim = data.textures[crt,] # apply for textures
array.images<-c(data.shapes.trim,data.textures.trim)
array.images<-cbind(data.shapes.trim,data.textures.trim)
View(array.images)
View(array.images)
View(array.images)
View(shapes1)
View(shapes2)
View(shapes4)
View(array.images)
View(array.images)
rownames(array.images)<-ref
array.images$files <- ref
array.images<-cbind(data.shapes.trim,data.textures.trim)
rownames(array.images)<-ref
View(array.images)
write.csv(array.images,file = "array.csv",row.names = TRUE)
View(shapes1)
array.images$names <-rownames(array.images)
array.images<-cbind(data.shapes.trim,data.textures.trim)
rownames(array.images)<-ref
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <- as.character(strsplit(refs.all,".tif"))
seg <- as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holder for feature-results
writer.1 <- paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <- computeFeatures(seg.labelled,refs.array)
fts.tex <- computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
rownames(fts.shp)<-ref[i]
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
View(fts.shp)
length(fts.shp)
rows(fts.shp)
row(fts.shp)
dim(fts.shp)
dim(fts.shp)[1]
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <- as.character(strsplit(refs.all,".tif"))
seg <- as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holder for feature-results
writer.1 <- paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <- computeFeatures(seg.labelled,refs.array)
fts.tex <- computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
rownames(fts.shp)<-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
View(shapes1)
View(shapes3)
View(shapes4)
View(shapes1)
View(shapes5)
rm(list=ls(pattern = "^fts"))
pieces.shp <- Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <- Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
data.shapes<-do.call(rbind,pieces.shp)
View(data.shapes)
data.textures<-do.call(rbind,pieces.tex)
View(data.textures)
crt = which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim = data.shapes[crt,] # apply to shape data
data.textures.trim = data.textures[crt,] # apply for textures
View(data.shapes.trim)
array.images<-cbind(data.shapes.trim,data.textures.trim)
View(array.images)
array.dfs <- as.data.frame(array.images)
View(array.dfs)
rNames <- rownames(array.dfs)
?strsplit
rNames.tag <- strsplit(rNames,"-g-"))
rNames.tag <- strsplit(rNames,"g-"))
rNames.tag <- strsplit(rNames,"-g-")
rNames.tag <- strsplit(rNames,"-g-")[2]
rNames.tag <- strsplit(rNames,"-g-")[,2]
rNames.tag <- strsplit(rNames,"-g-")[]
rNames.tag <- as.character(strsplit(rNames,"-g-"))
rNames.tag <- as.character(strsplit(rNames,"-"))
library(stringi)
stri_sub(rNames,-4)
library(stringr)
str_extract(rNames,"^-g-")
str_extract(rNames,"*-g-")
str_extract(rNames,"\\-g-")
str_extract(rNames,"[-g-]")
str_extract(rNames,"[-g-]+")
str_extract(rNames,"[-g-]{1,4}")
str_extract(rNames,"[-g-]{4}")
str_extract(rNames,"[-g-]{-1,4}")
str_extract(rNames,"[-g-]{1,-4}")
str_sub(rNames,-4)
rNames.tag<- str_sub(rNames,-4)
array.dfs$images<-rNames.tag
View(array.dfs)
array.dfs$images<-NA
View(array.dfs)
cbind(array.dfsimages,rNames.tag)
cbind(array.dfs,rNames.tag)
bspp.grey <- readImage("01-g-bspp.tif")
?maggritr
array.dfs %<>% cbind(rNames.tag,.)
library(magrittr)
array.dfs %<>% cbind(rNames.tag,.)
View(array.dfs)
array.dfs <- as.data.frame(array.images)
rNames <- rownames(array.dfs)
library(stringr)
rNames.tag<- str_sub(rNames,-4)
library(magrittr)
array.dfs %<>% cbind(rNames.tag,.)
View(array.images)
View(array.dfs)
View(array.dfs)
str(array.dfs)
View(array.dfs)
View(shapes6)
library(EBImage)
# basic book-keeping
refs.all <- list.files(pattern = "*-g-bspp")
segs.all <- list.files(pattern = "*-s-bspp")
beg = 1
end = as.numeric(length(refs.all))
# short labels for meta-data
ref <- as.character(strsplit(refs.all,".tif"))
seg <- as.character(strsplit(segs.all,".tif"))
# main loop
for (i in beg:end){
# read and label images
refs.array <-readImage(refs.all[i])
seg.array <-readImage(segs.all[i])
seg.labelled <-bwlabel(seg.array)
# contruct holder for feature-results
writer.1 <- paste0("shapes",i)
writer.2 <-paste0("textures",i)
# compute features
fts.shp <- computeFeatures(seg.labelled,refs.array)
fts.tex <- computeFeatures.haralick(seg.labelled,refs.array)
#--->
# can trim here or outside loop
#crt = which(fts[,6]>=10000) # size criteria here
#fts.trim = fts[crt,]
#--->
# assigning rownames here for completeness
rownames(fts.shp)<-rep(ref[i],dim(fts.shp)[1])
# use assign for each feature set
assign(writer.1,fts.shp)
assign(writer.2,fts.tex)
}
rm(list=ls(pattern = "^fts"))
pieces.shp <- Filter(function(x) is(x, "matrix"),mget(ls(pattern = "^shapes")))
pieces.tex <- Filter(function(x) is(x, "matrix"), mget(ls(pattern= "^textures")))
# construct lists
data.shapes<-do.call(rbind,pieces.shp)
data.textures<-do.call(rbind,pieces.tex)
# trim data
crt = which(data.shapes[,6]>=10000) # size criteria here
data.shapes.trim = data.shapes[crt,] # apply to shape data
data.textures.trim = data.textures[crt,] # apply for textures
# bind rows for full array of features
array.images<-cbind(data.shapes.trim,data.textures.trim)
# write out feature matrix
write.csv(array.images,file = "array.csv",row.names = TRUE)
# Part II - Model Creation
library(stringr)
library(magrittr)
# to DF
array.dfs <- as.data.frame(array.images)
# create a column of image-names
rNames <- rownames(array.dfs)
rNames.tag<- str_sub(rNames,-4)
array.dfs %<>% cbind(rNames.tag,.)
View(array.dfs)
